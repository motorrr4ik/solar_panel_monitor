
solar_panel_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080065e0  080065e0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e0  080065e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080065e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000014  080065fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080065fc  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc2a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235a  00000000  00000000  0002fc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00031fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00033090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d2f  00000000  00000000  000340a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122cc  00000000  00000000  0004cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a29  00000000  00000000  0005f0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1acc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  000f1b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080065a0 	.word	0x080065a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080065a0 	.word	0x080065a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <wireWriteRegister>:
 @brief  Sends a single command byte over I2C
 */
/**************************************************************************/
uint8_t adrs_219 = 0x40; // you can call this from main function when necessary especially when using multiple INA219 on board
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
    uint8_t i2c_temp[2];
    i2c_temp[0] = value>>8;
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	733b      	strb	r3, [r7, #12]
    i2c_temp[1] = value;
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&hi2c2, adrs_219<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <wireWriteRegister+0x54>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b299      	uxth	r1, r3
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29a      	uxth	r2, r3
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2302      	movs	r3, #2
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <wireWriteRegister+0x58>)
 8001086:	f002 fa1d 	bl	80034c4 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f001 f85c 	bl	8002148 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	2000006c 	.word	0x2000006c

080010a0 <wireReadRegister>:
/*!
 @brief  Reads a 16 bit values over I2C
 */
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
    uint8_t i2c_temp[2];
    HAL_I2C_Mem_Read(&hi2c2, adrs_219<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <wireReadRegister+0x54>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	b299      	uxth	r1, r3
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <wireReadRegister+0x58>)
 80010ce:	f002 faf3 	bl	80036b8 <HAL_I2C_Mem_Read>
    HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f001 f838 	bl	8002148 <HAL_Delay>
    *value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	801a      	strh	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	2000006c 	.word	0x2000006c

080010fc <setCalibration_32V_1A>:
 1.3A.

 @note   These calculations assume a 0.1 ohm resistor is present
 */
/**************************************************************************/
void setCalibration_32V_1A(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

    // 5. Compute the calibration register
    // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
    // Cal = 10240 (0x2800)

    ina219_calValue = 10240;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <setCalibration_32V_1A+0x40>)
 8001104:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8001108:	601a      	str	r2, [r3, #0]
    // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
    // MaximumPower = 1.31068 * 32V
    // MaximumPower = 41.94176W

    // Set multipliers to convert raw current/power values
    ina219_currentDivider_mA = 25;  // Current LSB = 40uA per bit (1000/40 = 25)
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <setCalibration_32V_1A+0x44>)
 800110c:	2219      	movs	r2, #25
 800110e:	601a      	str	r2, [r3, #0]
    ina219_powerMultiplier_mW = 1;         // Power LSB = 800mW per bit
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <setCalibration_32V_1A+0x48>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

    // Set Calibration register to 'Cal' calculated above
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <setCalibration_32V_1A+0x40>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	2005      	movs	r0, #5
 8001120:	f7ff ff90 	bl	8001044 <wireWriteRegister>

    // Set Config register to take into account the settings above
    uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V
 8001124:	f643 139f 	movw	r3, #14751	; 0x399f
 8001128:	80fb      	strh	r3, [r7, #6]
            | INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT
            | INA219_CONFIG_SADCRES_12BIT_1S_532US
            | INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
    wireWriteRegister(INA219_REG_CONFIG, config);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4619      	mov	r1, r3
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff ff88 	bl	8001044 <wireWriteRegister>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000038 	.word	0x20000038
 8001140:	20000030 	.word	0x20000030
 8001144:	20000034 	.word	0x20000034

08001148 <getBusVoltage_raw>:
/*!
 @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 @return the raw bus voltage reading
 */
/**************************************************************************/
int16_t getBusVoltage_raw() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
    uint16_t value;
    wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	4619      	mov	r1, r3
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff ffa4 	bl	80010a0 <wireReadRegister>

    // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
    return (int16_t) ((value >> 3) * 4);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	b29b      	uxth	r3, r3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	b29b      	uxth	r3, r3
 8001162:	b21b      	sxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <getCurrent_raw>:
/*!
 @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 @return the raw current reading
 */
/**************************************************************************/
int16_t getCurrent_raw() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

    // Sometimes a sharp load will reset the INA219, which will
    // reset the cal register, meaning CURRENT and POWER will
    // not be available ... avoid this by always setting a cal
    // value even if it's an unfortunate extra step
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <getCurrent_raw+0x2c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4619      	mov	r1, r3
 800117a:	2005      	movs	r0, #5
 800117c:	f7ff ff62 	bl	8001044 <wireWriteRegister>

    // Now we can safely read the CURRENT register!
    wireReadRegister(INA219_REG_CURRENT, &value);
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	4619      	mov	r1, r3
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff ff8b 	bl	80010a0 <wireReadRegister>

    return (int16_t) value;
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	b21b      	sxth	r3, r3
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000038 	.word	0x20000038

0800119c <getPower_raw>:
/*!
 @brief  Gets the raw power value (16-bit signed integer, so +-32767)
 @return raw power reading
 */
/**************************************************************************/
int16_t getPower_raw() {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

    // Sometimes a sharp load will reset the INA219, which will
    // reset the cal register, meaning CURRENT and POWER will
    // not be available ... avoid this by always setting a cal
    // value even if it's an unfortunate extra step
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <getPower_raw+0x2c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	2005      	movs	r0, #5
 80011ac:	f7ff ff4a 	bl	8001044 <wireWriteRegister>

    // Now we can safely read the POWER register!
    wireReadRegister(INA219_REG_POWER, &value);
 80011b0:	1dbb      	adds	r3, r7, #6
 80011b2:	4619      	mov	r1, r3
 80011b4:	2003      	movs	r0, #3
 80011b6:	f7ff ff73 	bl	80010a0 <wireReadRegister>

    return (int16_t) value;
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	b21b      	sxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000038 	.word	0x20000038
 80011cc:	00000000 	.word	0x00000000

080011d0 <getBusVoltage_V>:
/*!
 @brief  Gets the shunt voltage in volts
 @return the bus voltage converted to volts
 */
/**************************************************************************/
float getBusVoltage_V() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    int16_t value = getBusVoltage_raw();
 80011d6:	f7ff ffb7 	bl	8001148 <getBusVoltage_raw>
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
    return (float)value * 0.001;
 80011de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd14 	bl	8000c10 <__aeabi_i2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f914 	bl	8000418 <__aeabi_f2d>
 80011f0:	a307      	add	r3, pc, #28	; (adr r3, 8001210 <getBusVoltage_V+0x40>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f967 	bl	80004c8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fbfb 	bl	80009fc <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	d2f1a9fc 	.word	0xd2f1a9fc
 8001214:	3f50624d 	.word	0x3f50624d

08001218 <getCurrent_mA>:
 @brief  Gets the current value in mA, taking into account the
 config settings and current LSB
 @return the current reading convereted to milliamps
 */
/**************************************************************************/
float getCurrent_mA() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    float valueDec = getCurrent_raw();
 800121e:	f7ff ffa5 	bl	800116c <getCurrent_raw>
 8001222:	4603      	mov	r3, r0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fcf3 	bl	8000c10 <__aeabi_i2f>
 800122a:	4603      	mov	r3, r0
 800122c:	607b      	str	r3, [r7, #4]
    valueDec /= ina219_currentDivider_mA;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <getCurrent_mA+0x38>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fce8 	bl	8000c08 <__aeabi_ui2f>
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fdef 	bl	8000e20 <__aeabi_fdiv>
 8001242:	4603      	mov	r3, r0
 8001244:	607b      	str	r3, [r7, #4]
    return valueDec;
 8001246:	687b      	ldr	r3, [r7, #4]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000030 	.word	0x20000030

08001254 <getPower_mW>:
 @brief  Gets the power value in mW, taking into account the
 config settings and current LSB
 @return power reading converted to milliwatts
 */
/**************************************************************************/
float getPower_mW() {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
    float valueDec = getPower_raw();
 800125a:	f7ff ff9f 	bl	800119c <getPower_raw>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fcd5 	bl	8000c10 <__aeabi_i2f>
 8001266:	4603      	mov	r3, r0
 8001268:	607b      	str	r3, [r7, #4]
    valueDec *= ina219_powerMultiplier_mW;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <getPower_mW+0x38>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcca 	bl	8000c08 <__aeabi_ui2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fd1d 	bl	8000cb8 <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	607b      	str	r3, [r7, #4]
    return valueDec;
 8001282:	687b      	ldr	r3, [r7, #4]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000034 	.word	0x20000034

08001290 <getData>:
	uint32_t terminator;
}ina219_sensor_data;

ina219_sensor_data data;

void getData(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	//get data
	current_value = getCurrent_mA();
 8001294:	f7ff ffc0 	bl	8001218 <getCurrent_mA>
 8001298:	4603      	mov	r3, r0
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <getData+0xc0>)
 800129c:	6013      	str	r3, [r2, #0]
	power_value = getPower_mW();
 800129e:	f7ff ffd9 	bl	8001254 <getPower_mW>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <getData+0xc4>)
 80012a6:	6013      	str	r3, [r2, #0]
	voltage_value = getBusVoltage_V();
 80012a8:	f7ff ff92 	bl	80011d0 <getBusVoltage_V>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <getData+0xc8>)
 80012b0:	6013      	str	r3, [r2, #0]
	load_voltage = 3.3*HAL_ADC_GetValue(&hadc1)/4095;
 80012b2:	482a      	ldr	r0, [pc, #168]	; (800135c <getData+0xcc>)
 80012b4:	f001 f8f2 	bl	800249c <HAL_ADC_GetValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f88a 	bl	80003d4 <__aeabi_ui2d>
 80012c0:	a31d      	add	r3, pc, #116	; (adr r3, 8001338 <getData+0xa8>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f8ff 	bl	80004c8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	a31b      	add	r3, pc, #108	; (adr r3, 8001340 <getData+0xb0>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fa20 	bl	800071c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fb8a 	bl	80009fc <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <getData+0xd0>)
 80012ec:	6013      	str	r3, [r2, #0]
	load_voltage = -1*BOOSTER_COEFF*(load_voltage*2-3.3);
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <getData+0xd0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fbd7 	bl	8000aa8 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f88b 	bl	8000418 <__aeabi_f2d>
 8001302:	a30d      	add	r3, pc, #52	; (adr r3, 8001338 <getData+0xa8>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7fe ff26 	bl	8000158 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	a30c      	add	r3, pc, #48	; (adr r3, 8001348 <getData+0xb8>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f8d5 	bl	80004c8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fb69 	bl	80009fc <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <getData+0xd0>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	66666666 	.word	0x66666666
 800134c:	c01a6666 	.word	0xc01a6666
 8001350:	200001fc 	.word	0x200001fc
 8001354:	20000224 	.word	0x20000224
 8001358:	20000248 	.word	0x20000248
 800135c:	2000003c 	.word	0x2000003c
 8001360:	20000258 	.word	0x20000258

08001364 <filterData>:
void filterData(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	//filtering current
	current_filter_sum_value = current_filter_sum_value - current_filter_data[CURRENT_FILTER_COUNTER];
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <filterData+0x16c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <filterData+0x170>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4959      	ldr	r1, [pc, #356]	; (80014d8 <filterData+0x174>)
 8001372:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fb93 	bl	8000aa4 <__aeabi_fsub>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <filterData+0x16c>)
 8001384:	601a      	str	r2, [r3, #0]
	current_filter_data[CURRENT_FILTER_COUNTER] = current_value;
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <filterData+0x170>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a54      	ldr	r2, [pc, #336]	; (80014dc <filterData+0x178>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4952      	ldr	r1, [pc, #328]	; (80014d8 <filterData+0x174>)
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	current_filter_sum_value = current_filter_sum_value + current_value;
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <filterData+0x16c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <filterData+0x178>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fb82 	bl	8000aa8 <__addsf3>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <filterData+0x16c>)
 80013aa:	601a      	str	r2, [r3, #0]
	CURRENT_FILTER_COUNTER = (CURRENT_FILTER_COUNTER + 1) % CURRENT_MEDIUM_AVERAGE_FILTER_STEP;
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <filterData+0x170>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1c59      	adds	r1, r3, #1
 80013b2:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <filterData+0x17c>)
 80013b4:	fb83 2301 	smull	r2, r3, r3, r1
 80013b8:	105a      	asrs	r2, r3, #1
 80013ba:	17cb      	asrs	r3, r1, #31
 80013bc:	1ad2      	subs	r2, r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	1aca      	subs	r2, r1, r3
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <filterData+0x170>)
 80013c8:	601a      	str	r2, [r3, #0]
	average_current_value = current_filter_sum_value / CURRENT_MEDIUM_AVERAGE_FILTER_STEP;
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <filterData+0x16c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4945      	ldr	r1, [pc, #276]	; (80014e4 <filterData+0x180>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd25 	bl	8000e20 <__aeabi_fdiv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <filterData+0x184>)
 80013dc:	601a      	str	r2, [r3, #0]

	//filtering power
	power_filter_sum_value = power_filter_sum_value - power_filter_data[POWER_FILTER_COUNTER];
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <filterData+0x188>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <filterData+0x18c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4943      	ldr	r1, [pc, #268]	; (80014f4 <filterData+0x190>)
 80013e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f7ff fb58 	bl	8000aa4 <__aeabi_fsub>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <filterData+0x188>)
 80013fa:	601a      	str	r2, [r3, #0]
	power_filter_data[POWER_FILTER_COUNTER] = power_value;
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <filterData+0x18c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3d      	ldr	r2, [pc, #244]	; (80014f8 <filterData+0x194>)
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	493b      	ldr	r1, [pc, #236]	; (80014f4 <filterData+0x190>)
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	power_filter_sum_value = power_filter_sum_value + power_value;
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <filterData+0x188>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a3a      	ldr	r2, [pc, #232]	; (80014f8 <filterData+0x194>)
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fb47 	bl	8000aa8 <__addsf3>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <filterData+0x188>)
 8001420:	601a      	str	r2, [r3, #0]
	POWER_FILTER_COUNTER = (POWER_FILTER_COUNTER + 1) % POWER_MEDIUM_AVERAGE_FILTER_STEP;
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <filterData+0x18c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <filterData+0x17c>)
 800142a:	fb83 2301 	smull	r2, r3, r3, r1
 800142e:	105a      	asrs	r2, r3, #1
 8001430:	17cb      	asrs	r3, r1, #31
 8001432:	1ad2      	subs	r2, r2, r3
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	1aca      	subs	r2, r1, r3
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <filterData+0x18c>)
 800143e:	601a      	str	r2, [r3, #0]
	average_power_value = power_filter_sum_value / POWER_MEDIUM_AVERAGE_FILTER_STEP;
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <filterData+0x188>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4927      	ldr	r1, [pc, #156]	; (80014e4 <filterData+0x180>)
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fcea 	bl	8000e20 <__aeabi_fdiv>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <filterData+0x198>)
 8001452:	601a      	str	r2, [r3, #0]

	//filtering voltage
	voltage_filter_sum_value = voltage_filter_sum_value - voltage_filter_data[VOLTAGE_FILTER_COUNTER];
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <filterData+0x19c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <filterData+0x1a0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	492a      	ldr	r1, [pc, #168]	; (8001508 <filterData+0x1a4>)
 800145e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001462:	4619      	mov	r1, r3
 8001464:	4610      	mov	r0, r2
 8001466:	f7ff fb1d 	bl	8000aa4 <__aeabi_fsub>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <filterData+0x19c>)
 8001470:	601a      	str	r2, [r3, #0]
	voltage_filter_data[VOLTAGE_FILTER_COUNTER] = voltage_value;
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <filterData+0x1a0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a25      	ldr	r2, [pc, #148]	; (800150c <filterData+0x1a8>)
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	4923      	ldr	r1, [pc, #140]	; (8001508 <filterData+0x1a4>)
 800147c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	voltage_filter_sum_value = voltage_filter_sum_value + voltage_value;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <filterData+0x19c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <filterData+0x1a8>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb0c 	bl	8000aa8 <__addsf3>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <filterData+0x19c>)
 8001496:	601a      	str	r2, [r3, #0]
	VOLTAGE_FILTER_COUNTER = (VOLTAGE_FILTER_COUNTER + 1) % VOLTAGE_MEDIUM_AVERAGE_FILTER_STEP;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <filterData+0x1a0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1c59      	adds	r1, r3, #1
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <filterData+0x17c>)
 80014a0:	fb83 2301 	smull	r2, r3, r3, r1
 80014a4:	105a      	asrs	r2, r3, #1
 80014a6:	17cb      	asrs	r3, r1, #31
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	1aca      	subs	r2, r1, r3
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <filterData+0x1a0>)
 80014b4:	601a      	str	r2, [r3, #0]
	average_voltage_value = voltage_filter_sum_value / VOLTAGE_MEDIUM_AVERAGE_FILTER_STEP;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <filterData+0x19c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	490a      	ldr	r1, [pc, #40]	; (80014e4 <filterData+0x180>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fcaf 	bl	8000e20 <__aeabi_fdiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <filterData+0x1ac>)
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f8 	.word	0x200001f8
 80014d4:	200001d8 	.word	0x200001d8
 80014d8:	200001e4 	.word	0x200001e4
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	66666667 	.word	0x66666667
 80014e4:	40a00000 	.word	0x40a00000
 80014e8:	20000200 	.word	0x20000200
 80014ec:	20000220 	.word	0x20000220
 80014f0:	200001dc 	.word	0x200001dc
 80014f4:	2000020c 	.word	0x2000020c
 80014f8:	20000224 	.word	0x20000224
 80014fc:	20000228 	.word	0x20000228
 8001500:	20000244 	.word	0x20000244
 8001504:	200001e0 	.word	0x200001e0
 8001508:	20000230 	.word	0x20000230
 800150c:	20000248 	.word	0x20000248
 8001510:	2000024c 	.word	0x2000024c

08001514 <formOutputPacket>:

void formOutputPacket()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	data.header = 'NNNN';
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <formOutputPacket+0x58>)
 800151a:	f04f 324e 	mov.w	r2, #1313754702	; 0x4e4e4e4e
 800151e:	601a      	str	r2, [r3, #0]
	data.ina219_current_value = average_current_value;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <formOutputPacket+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <formOutputPacket+0x58>)
 8001526:	6053      	str	r3, [r2, #4]
	data.ina219_voltage_value = average_voltage_value;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <formOutputPacket+0x60>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <formOutputPacket+0x58>)
 800152e:	6093      	str	r3, [r2, #8]
	data.ina219_power_value = average_power_value;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <formOutputPacket+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <formOutputPacket+0x58>)
 8001536:	60d3      	str	r3, [r2, #12]
	data.delta_I = delta_I;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <formOutputPacket+0x68>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <formOutputPacket+0x58>)
 800153e:	6153      	str	r3, [r2, #20]
	data.delta_V = delta_V;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <formOutputPacket+0x6c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <formOutputPacket+0x58>)
 8001546:	6113      	str	r3, [r2, #16]
	data.delta_P = delta_P;
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <formOutputPacket+0x70>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <formOutputPacket+0x58>)
 800154e:	6193      	str	r3, [r2, #24]
	data.duty_cycle = duty_cycle;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <formOutputPacket+0x74>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb5b 	bl	8000c10 <__aeabi_i2f>
 800155a:	4603      	mov	r3, r0
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <formOutputPacket+0x58>)
 800155e:	61d3      	str	r3, [r2, #28]
	data.terminator = 'EEEE';
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <formOutputPacket+0x58>)
 8001562:	f04f 3245 	mov.w	r2, #1162167621	; 0x45454545
 8001566:	621a      	str	r2, [r3, #32]
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000025c 	.word	0x2000025c
 8001570:	20000200 	.word	0x20000200
 8001574:	2000024c 	.word	0x2000024c
 8001578:	20000228 	.word	0x20000228
 800157c:	20000204 	.word	0x20000204
 8001580:	20000250 	.word	0x20000250
 8001584:	2000022c 	.word	0x2000022c
 8001588:	20000004 	.word	0x20000004

0800158c <updateDutyCycle>:
	htim1.Init.Period = counterPeriod;
	HAL_TIM_Base_Init(&htim1);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
}

void updateDutyCycle(int pulse){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <updateDutyCycle+0x1c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200000c0 	.word	0x200000c0

080015ac <dutyCycleLimits>:

void dutyCycleLimits(){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	if(duty_cycle < 0){
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <dutyCycleLimits+0x2c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da03      	bge.n	80015c0 <dutyCycleLimits+0x14>
		duty_cycle = 0;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <dutyCycleLimits+0x2c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
	}else if(duty_cycle > 99){
		duty_cycle = 99;
	}

}
 80015be:	e006      	b.n	80015ce <dutyCycleLimits+0x22>
	}else if(duty_cycle > 99){
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <dutyCycleLimits+0x2c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b63      	cmp	r3, #99	; 0x63
 80015c6:	dd02      	ble.n	80015ce <dutyCycleLimits+0x22>
		duty_cycle = 99;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <dutyCycleLimits+0x2c>)
 80015ca:	2263      	movs	r2, #99	; 0x63
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000004 	.word	0x20000004
 80015dc:	00000000 	.word	0x00000000

080015e0 <incrementalConductanceAlgorithm>:
			updateDutyCycle(duty_cycle);
		}
	}
}

void incrementalConductanceAlgorithm(){
 80015e0:	b598      	push	{r3, r4, r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	delta_V = average_voltage_value - prev_V;
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <incrementalConductanceAlgorithm+0x170>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <incrementalConductanceAlgorithm+0x174>)
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fa58 	bl	8000aa4 <__aeabi_fsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b57      	ldr	r3, [pc, #348]	; (8001758 <incrementalConductanceAlgorithm+0x178>)
 80015fa:	601a      	str	r2, [r3, #0]
	delta_I = average_current_value - prev_I;
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <incrementalConductanceAlgorithm+0x17c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <incrementalConductanceAlgorithm+0x180>)
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa4c 	bl	8000aa4 <__aeabi_fsub>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <incrementalConductanceAlgorithm+0x184>)
 8001612:	601a      	str	r2, [r3, #0]
	prev_I = average_current_value;
 8001614:	4b51      	ldr	r3, [pc, #324]	; (800175c <incrementalConductanceAlgorithm+0x17c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a51      	ldr	r2, [pc, #324]	; (8001760 <incrementalConductanceAlgorithm+0x180>)
 800161a:	6013      	str	r3, [r2, #0]
	prev_V = average_voltage_value;
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <incrementalConductanceAlgorithm+0x170>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <incrementalConductanceAlgorithm+0x174>)
 8001622:	6013      	str	r3, [r2, #0]
//	delta_V = load_voltage - prev_load_voltage;
//	delta_I = average_current_value - prev_I;
//	prev_load_voltage = load_voltage;
//	prev_I = average_current_value;

	if (fabs(delta_V) <= 0.1){
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <incrementalConductanceAlgorithm+0x178>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fef3 	bl	8000418 <__aeabi_f2d>
 8001632:	a345      	add	r3, pc, #276	; (adr r3, 8001748 <incrementalConductanceAlgorithm+0x168>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f9c2 	bl	80009c0 <__aeabi_dcmple>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d02e      	beq.n	80016a0 <incrementalConductanceAlgorithm+0xc0>
		if(delta_I > 0){
 8001642:	4b48      	ldr	r3, [pc, #288]	; (8001764 <incrementalConductanceAlgorithm+0x184>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fcf0 	bl	8001030 <__aeabi_fcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <incrementalConductanceAlgorithm+0x90>
			duty_cycle -= 1;
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3b01      	subs	r3, #1
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 800165e:	6013      	str	r3, [r2, #0]
			dutyCycleLimits();
 8001660:	f7ff ffa4 	bl	80015ac <dutyCycleLimits>
			updateDutyCycle(duty_cycle);
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff8f 	bl	800158c <updateDutyCycle>
					updateDutyCycle(duty_cycle);
				}
			}
	}

}
 800166e:	e069      	b.n	8001744 <incrementalConductanceAlgorithm+0x164>
		} else if(delta_I < 0){
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <incrementalConductanceAlgorithm+0x184>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fcbb 	bl	8000ff4 <__aeabi_fcmplt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d100      	bne.n	8001686 <incrementalConductanceAlgorithm+0xa6>
}
 8001684:	e05e      	b.n	8001744 <incrementalConductanceAlgorithm+0x164>
			duty_cycle += 1;
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a36      	ldr	r2, [pc, #216]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 800168e:	6013      	str	r3, [r2, #0]
			dutyCycleLimits();
 8001690:	f7ff ff8c 	bl	80015ac <dutyCycleLimits>
			updateDutyCycle(duty_cycle);
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff77 	bl	800158c <updateDutyCycle>
}
 800169e:	e051      	b.n	8001744 <incrementalConductanceAlgorithm+0x164>
		if(delta_I/delta_V != -average_current_value/average_voltage_value){
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <incrementalConductanceAlgorithm+0x184>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <incrementalConductanceAlgorithm+0x178>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fbb8 	bl	8000e20 <__aeabi_fdiv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461c      	mov	r4, r3
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <incrementalConductanceAlgorithm+0x17c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016bc:	4a24      	ldr	r2, [pc, #144]	; (8001750 <incrementalConductanceAlgorithm+0x170>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fbac 	bl	8000e20 <__aeabi_fdiv>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff fc87 	bl	8000fe0 <__aeabi_fcmpeq>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d000      	beq.n	80016da <incrementalConductanceAlgorithm+0xfa>
}
 80016d8:	e034      	b.n	8001744 <incrementalConductanceAlgorithm+0x164>
				if(delta_I/delta_V > -average_current_value/average_voltage_value){
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <incrementalConductanceAlgorithm+0x184>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <incrementalConductanceAlgorithm+0x178>)
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb9b 	bl	8000e20 <__aeabi_fdiv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461c      	mov	r4, r3
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <incrementalConductanceAlgorithm+0x17c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <incrementalConductanceAlgorithm+0x170>)
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb8f 	bl	8000e20 <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fc92 	bl	8001030 <__aeabi_fcmpgt>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00c      	beq.n	800172c <incrementalConductanceAlgorithm+0x14c>
					duty_cycle -= 1;
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 800171a:	6013      	str	r3, [r2, #0]
					dutyCycleLimits();
 800171c:	f7ff ff46 	bl	80015ac <dutyCycleLimits>
					updateDutyCycle(duty_cycle);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <updateDutyCycle>
}
 800172a:	e00b      	b.n	8001744 <incrementalConductanceAlgorithm+0x164>
					duty_cycle += 1;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 8001734:	6013      	str	r3, [r2, #0]
					dutyCycleLimits();
 8001736:	f7ff ff39 	bl	80015ac <dutyCycleLimits>
					updateDutyCycle(duty_cycle);
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <incrementalConductanceAlgorithm+0x188>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff24 	bl	800158c <updateDutyCycle>
}
 8001744:	bf00      	nop
 8001746:	bd98      	pop	{r3, r4, r7, pc}
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3fb99999 	.word	0x3fb99999
 8001750:	2000024c 	.word	0x2000024c
 8001754:	20000254 	.word	0x20000254
 8001758:	20000250 	.word	0x20000250
 800175c:	20000200 	.word	0x20000200
 8001760:	20000208 	.word	0x20000208
 8001764:	20000204 	.word	0x20000204
 8001768:	20000004 	.word	0x20000004

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001770:	f000 fc88 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001774:	f000 f82a 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001778:	f000 fa22 	bl	8001bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 800177c:	f000 fa02 	bl	8001b84 <MX_DMA_Init>
  MX_I2C2_Init();
 8001780:	f000 f8bc 	bl	80018fc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001784:	f000 f9d4 	bl	8001b30 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001788:	f000 f986 	bl	8001a98 <MX_TIM4_Init>
  MX_TIM1_Init();
 800178c:	f000 f8e4 	bl	8001958 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001790:	f000 f876 	bl	8001880 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001794:	480a      	ldr	r0, [pc, #40]	; (80017c0 <main+0x54>)
 8001796:	f003 fa71 	bl	8004c7c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800179a:	2100      	movs	r1, #0
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <main+0x58>)
 800179e:	f003 fb17 	bl	8004dd0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <main+0x5c>)
 80017a4:	f000 fdcc 	bl	8002340 <HAL_ADC_Start>
//  HAL_ADC_Start_DMA(&hadc1, &test_data, sizeof(test_data));
  setCalibration_32V_1A();
 80017a8:	f7ff fca8 	bl	80010fc <setCalibration_32V_1A>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  test_data = HAL_ADC_GetValue(&hadc1);

	  getData();
 80017ac:	f7ff fd70 	bl	8001290 <getData>
	  filterData();
 80017b0:	f7ff fdd8 	bl	8001364 <filterData>
	  incrementalConductanceAlgorithm();
 80017b4:	f7ff ff14 	bl	80015e0 <incrementalConductanceAlgorithm>
//	  perturbObserveAlgorithm();
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 15);
	  formOutputPacket();
 80017b8:	f7ff feac 	bl	8001514 <formOutputPacket>
	  getData();
 80017bc:	e7f6      	b.n	80017ac <main+0x40>
 80017be:	bf00      	nop
 80017c0:	20000108 	.word	0x20000108
 80017c4:	200000c0 	.word	0x200000c0
 80017c8:	2000003c 	.word	0x2000003c

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	; 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d6:	2228      	movs	r2, #40	; 0x28
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 fed8 	bl	8006590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180a:	2301      	movs	r3, #1
 800180c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001818:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fd0a 	bl	800423c <HAL_RCC_OscConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800182e:	f000 fa07 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001832:	230f      	movs	r3, #15
 8001834:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f002 ff77 	bl	8004740 <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001858:	f000 f9f2 	bl	8001c40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800185c:	2302      	movs	r3, #2
 800185e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f003 f902 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001872:	f000 f9e5 	bl	8001c40 <Error_Handler>
  }
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_ADC1_Init+0x74>)
 8001892:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <MX_ADC1_Init+0x78>)
 8001894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_ADC1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_ADC1_Init+0x74>)
 800189e:	2201      	movs	r2, #1
 80018a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_ADC1_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_ADC1_Init+0x74>)
 80018aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_ADC1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_ADC1_Init+0x74>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_ADC1_Init+0x74>)
 80018be:	f000 fc67 	bl	8002190 <HAL_ADC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018c8:	f000 f9ba 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80018d4:	2302      	movs	r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_ADC1_Init+0x74>)
 80018de:	f000 fde9 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018e8:	f000 f9aa 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000003c 	.word	0x2000003c
 80018f8:	40012400 	.word	0x40012400

080018fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C2_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <MX_I2C2_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C2_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_I2C2_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C2_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_I2C2_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_I2C2_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_I2C2_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_I2C2_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_I2C2_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_I2C2_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_I2C2_Init+0x50>)
 800193a:	f001 fc7f 	bl	800323c <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001944:	f000 f97c 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000006c 	.word	0x2000006c
 8001950:	40005800 	.word	0x40005800
 8001954:	00061a80 	.word	0x00061a80

08001958 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b096      	sub	sp, #88	; 0x58
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2220      	movs	r2, #32
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f004 fdfd 	bl	8006590 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <MX_TIM1_Init+0x138>)
 8001998:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <MX_TIM1_Init+0x13c>)
 800199a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_TIM1_Init+0x138>)
 800199e:	2204      	movs	r2, #4
 80019a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019aa:	2263      	movs	r2, #99	; 0x63
 80019ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c0:	4833      	ldr	r0, [pc, #204]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019c2:	f003 f90b 	bl	8004bdc <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80019cc:	f000 f938 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019da:	4619      	mov	r1, r3
 80019dc:	482c      	ldr	r0, [pc, #176]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019de:	f003 fc5f 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80019e8:	f000 f92a 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ec:	4828      	ldr	r0, [pc, #160]	; (8001a90 <MX_TIM1_Init+0x138>)
 80019ee:	f003 f997 	bl	8004d20 <HAL_TIM_PWM_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019f8:	f000 f922 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4821      	ldr	r0, [pc, #132]	; (8001a90 <MX_TIM1_Init+0x138>)
 8001a0c:	f003 ffd4 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a16:	f000 f913 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a1a:	2360      	movs	r3, #96	; 0x60
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MX_TIM1_Init+0x138>)
 8001a40:	f003 fb70 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a4a:	f000 f8f9 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <MX_TIM1_Init+0x138>)
 8001a72:	f003 ffff 	bl	8005a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a7c:	f000 f8e0 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <MX_TIM1_Init+0x138>)
 8001a82:	f000 f9d3 	bl	8001e2c <HAL_TIM_MspPostInit>

}
 8001a86:	bf00      	nop
 8001a88:	3758      	adds	r7, #88	; 0x58
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200000c0 	.word	0x200000c0
 8001a94:	40012c00 	.word	0x40012c00

08001a98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <MX_TIM4_Init+0x94>)
 8001ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001abc:	220c      	movs	r2, #12
 8001abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001ac8:	2263      	movs	r2, #99	; 0x63
 8001aca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001ada:	f003 f87f 	bl	8004bdc <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001ae4:	f000 f8ac 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001af6:	f003 fbd3 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001b00:	f000 f89e 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_TIM4_Init+0x90>)
 8001b12:	f003 ff51 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001b1c:	f000 f890 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000108 	.word	0x20000108
 8001b2c:	40000800 	.word	0x40000800

08001b30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_USART2_UART_Init+0x50>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200 ;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b56:	2208      	movs	r2, #8
 8001b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART2_UART_Init+0x4c>)
 8001b68:	f003 ffe7 	bl	8005b3a <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b72:	f000 f865 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000150 	.word	0x20000150
 8001b80:	40004400 	.word	0x40004400

08001b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_DMA_Init+0x38>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <MX_DMA_Init+0x38>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6153      	str	r3, [r2, #20]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_DMA_Init+0x38>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2011      	movs	r0, #17
 8001ba8:	f000 feef 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bac:	2011      	movs	r0, #17
 8001bae:	f000 ff08 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001bcc:	f043 0320 	orr.w	r3, r3, #32
 8001bd0:	6193      	str	r3, [r2, #24]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <MX_GPIO_Init+0x58>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	//smile
	HAL_UART_Transmit_DMA(&huart2, &data, sizeof(data));
 8001c24:	2224      	movs	r2, #36	; 0x24
 8001c26:	4904      	ldr	r1, [pc, #16]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c2a:	f003 ffd3 	bl	8005bd4 <HAL_UART_Transmit_DMA>
//	if(test_duty > 99) test_duty = 99;
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, test_duty);
//	++test_duty;


}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000025c 	.word	0x2000025c
 8001c3c:	20000150 	.word	0x20000150

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <Error_Handler+0x8>
	...

08001c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_MspInit+0x5c>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <HAL_MspInit+0x5c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_MspInit+0x5c>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x5c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_MspInit+0x5c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x5c>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_MspInit+0x60>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_MspInit+0x60>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000

08001cb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <HAL_ADC_MspInit+0x6c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d121      	bne.n	8001d14 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_ADC_MspInit+0x70>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <HAL_ADC_MspInit+0x70>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_ADC_MspInit+0x70>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_ADC_MspInit+0x70>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <HAL_ADC_MspInit+0x70>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_ADC_MspInit+0x70>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d00:	2310      	movs	r3, #16
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d04:	2303      	movs	r3, #3
 8001d06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0x74>)
 8001d10:	f001 f910 	bl	8002f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40012400 	.word	0x40012400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800

08001d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_I2C_MspInit+0x74>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d124      	bne.n	8001d92 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_I2C_MspInit+0x78>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_I2C_MspInit+0x78>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_I2C_MspInit+0x78>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d66:	2312      	movs	r3, #18
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	480b      	ldr	r0, [pc, #44]	; (8001da4 <HAL_I2C_MspInit+0x7c>)
 8001d76:	f001 f8dd 	bl	8002f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_I2C_MspInit+0x78>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_I2C_MspInit+0x78>)
 8001d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_I2C_MspInit+0x78>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010c00 	.word	0x40010c00

08001da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_TIM_Base_MspInit+0x78>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d114      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_TIM_Base_MspInit+0x7c>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_TIM_Base_MspInit+0x7c>)
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_TIM_Base_MspInit+0x7c>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2018      	movs	r0, #24
 8001dd8:	f000 fdd7 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ddc:	2018      	movs	r0, #24
 8001dde:	f000 fdf0 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001de2:	e018      	b.n	8001e16 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_TIM_Base_MspInit+0x80>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d113      	bne.n	8001e16 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_TIM_Base_MspInit+0x7c>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_TIM_Base_MspInit+0x7c>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	61d3      	str	r3, [r2, #28]
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_TIM_Base_MspInit+0x7c>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	201e      	movs	r0, #30
 8001e0c:	f000 fdbd 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e10:	201e      	movs	r0, #30
 8001e12:	f000 fdd6 	bl	80029c2 <HAL_NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40000800 	.word	0x40000800

08001e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_TIM_MspPostInit+0x5c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d118      	bne.n	8001e7e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_TIM_MspPostInit+0x60>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_TIM_MspPostInit+0x60>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_TIM_MspPostInit+0x60>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_TIM_MspPostInit+0x64>)
 8001e7a:	f001 f85b 	bl	8002f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010800 	.word	0x40010800

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_UART_MspInit+0xe4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d15d      	bne.n	8001f70 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	4a30      	ldr	r2, [pc, #192]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebe:	61d3      	str	r3, [r2, #28]
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4822      	ldr	r0, [pc, #136]	; (8001f80 <HAL_UART_MspInit+0xec>)
 8001ef8:	f001 f81c 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001efc:	2308      	movs	r3, #8
 8001efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481c      	ldr	r0, [pc, #112]	; (8001f80 <HAL_UART_MspInit+0xec>)
 8001f10:	f001 f810 	bl	8002f34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_UART_MspInit+0xf4>)
 8001f18:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f46:	f000 fd57 	bl	80029f8 <HAL_DMA_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001f50:	f7ff fe76 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2026      	movs	r0, #38	; 0x26
 8001f66:	f000 fd10 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f6a:	2026      	movs	r0, #38	; 0x26
 8001f6c:	f000 fd29 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	20000194 	.word	0x20000194
 8001f88:	40020080 	.word	0x40020080

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f000 f89d 	bl	8002110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <DMA1_Channel7_IRQHandler+0x10>)
 8001fe2:	f000 fe73 	bl	8002ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000194 	.word	0x20000194

08001ff0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM1_BRK_IRQHandler+0x10>)
 8001ff6:	f002 ff8d 	bl	8004f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200000c0 	.word	0x200000c0

08002004 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM4_IRQHandler+0x10>)
 800200a:	f002 ff83 	bl	8004f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000108 	.word	0x20000108

08002018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART2_IRQHandler+0x10>)
 800201e:	f003 fe45 	bl	8005cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000150 	.word	0x20000150

0800202c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	; (8002070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800205e:	f7ff ffe5 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002062:	f004 fa71 	bl	8006548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002066:	f7ff fb81 	bl	800176c <main>
  bx lr
 800206a:	4770      	bx	lr
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002074:	080065e8 	.word	0x080065e8
  ldr r2, =_sbss
 8002078:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800207c:	20000284 	.word	0x20000284

08002080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC1_2_IRQHandler>
	...

08002084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_Init+0x28>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <HAL_Init+0x28>)
 800208e:	f043 0310 	orr.w	r3, r3, #16
 8002092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002094:	2003      	movs	r0, #3
 8002096:	f000 fc6d 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f808 	bl	80020b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a0:	f7ff fdd4 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40022000 	.word	0x40022000

080020b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x54>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x58>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fc85 	bl	80029de <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00e      	b.n	80020fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d80a      	bhi.n	80020fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f000 fc4d 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <HAL_InitTick+0x5c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000008 	.word	0x20000008
 8002108:	20000010 	.word	0x20000010
 800210c:	2000000c 	.word	0x2000000c

08002110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_IncTick+0x1c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_IncTick+0x20>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4413      	add	r3, r2
 8002120:	4a03      	ldr	r2, [pc, #12]	; (8002130 <HAL_IncTick+0x20>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000010 	.word	0x20000010
 8002130:	20000280 	.word	0x20000280

08002134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <HAL_GetTick+0x10>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000280 	.word	0x20000280

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff fff0 	bl	8002134 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffe0 	bl	8002134 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000010 	.word	0x20000010

08002190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0be      	b.n	8002330 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fd6e 	bl	8001cb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fabf 	bl	8002758 <ADC_ConversionStop_Disable>
 80021da:	4603      	mov	r3, r0
 80021dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8099 	bne.w	800231e <HAL_ADC_Init+0x18e>
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 8095 	bne.w	800231e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021fc:	f023 0302 	bic.w	r3, r3, #2
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002210:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7b1b      	ldrb	r3, [r3, #12]
 8002216:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002218:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4313      	orrs	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002228:	d003      	beq.n	8002232 <HAL_ADC_Init+0xa2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_ADC_Init+0xa8>
 8002232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002236:	e000      	b.n	800223a <HAL_ADC_Init+0xaa>
 8002238:	2300      	movs	r3, #0
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7d1b      	ldrb	r3, [r3, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d119      	bne.n	800227c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7b1b      	ldrb	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	3b01      	subs	r3, #1
 8002256:	035a      	lsls	r2, r3, #13
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	e00b      	b.n	800227c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f043 0220 	orr.w	r2, r3, #32
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_ADC_Init+0x1a8>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ac:	d003      	beq.n	80022b6 <HAL_ADC_Init+0x126>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d104      	bne.n	80022c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	051b      	lsls	r3, r3, #20
 80022be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_ADC_Init+0x1ac>)
 80022dc:	4013      	ands	r3, r2
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d10b      	bne.n	80022fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022fa:	e018      	b.n	800232e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	f023 0312 	bic.w	r3, r3, #18
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800231c:	e007      	b.n	800232e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f043 0210 	orr.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	ffe1f7fd 	.word	0xffe1f7fd
 800233c:	ff1f0efe 	.word	0xff1f0efe

08002340 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADC_Start+0x1a>
 8002356:	2302      	movs	r3, #2
 8002358:	e098      	b.n	800248c <HAL_ADC_Start+0x14c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f99e 	bl	80026a4 <ADC_Enable>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 8087 	bne.w	8002482 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a41      	ldr	r2, [pc, #260]	; (8002494 <HAL_ADC_Start+0x154>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d105      	bne.n	800239e <HAL_ADC_Start+0x5e>
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_ADC_Start+0x158>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d026      	beq.n	8002406 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c8:	e01d      	b.n	8002406 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <HAL_ADC_Start+0x158>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d004      	beq.n	80023ea <HAL_ADC_Start+0xaa>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <HAL_ADC_Start+0x154>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_Start+0xc6>
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_ADC_Start+0x158>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f023 0206 	bic.w	r2, r3, #6
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
 800241e:	e002      	b.n	8002426 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0202 	mvn.w	r2, #2
 8002436:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002442:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002446:	d113      	bne.n	8002470 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_ADC_Start+0x154>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d105      	bne.n	800245e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_ADC_Start+0x158>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	e00c      	b.n	800248a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e003      	b.n	800248a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40012800 	.word	0x40012800
 8002498:	40012400 	.word	0x40012400

0800249c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x20>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0dc      	b.n	800268e <HAL_ADC_ConfigChannel+0x1da>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d81c      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b05      	subs	r3, #5
 80024f6:	221f      	movs	r2, #31
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b05      	subs	r3, #5
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
 800251c:	e03c      	b.n	8002598 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d81c      	bhi.n	8002560 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b23      	subs	r3, #35	; 0x23
 8002538:	221f      	movs	r2, #31
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	4019      	ands	r1, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b23      	subs	r3, #35	; 0x23
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
 800255e:	e01b      	b.n	8002598 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3b41      	subs	r3, #65	; 0x41
 8002572:	221f      	movs	r2, #31
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	4019      	ands	r1, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	3b41      	subs	r3, #65	; 0x41
 800258c:	fa00 f203 	lsl.w	r2, r0, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d91c      	bls.n	80025da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	3b1e      	subs	r3, #30
 80025b2:	2207      	movs	r2, #7
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4019      	ands	r1, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6898      	ldr	r0, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	3b1e      	subs	r3, #30
 80025cc:	fa00 f203 	lsl.w	r2, r0, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	e019      	b.n	800260e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6919      	ldr	r1, [r3, #16]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	2207      	movs	r2, #7
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4019      	ands	r1, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6898      	ldr	r0, [r3, #8]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b10      	cmp	r3, #16
 8002614:	d003      	beq.n	800261e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800261a:	2b11      	cmp	r3, #17
 800261c:	d132      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_ADC_ConfigChannel+0x1e4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d125      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d126      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002644:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b10      	cmp	r3, #16
 800264c:	d11a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_ADC_ConfigChannel+0x1e8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9a      	lsrs	r2, r3, #18
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002664:	e002      	b.n	800266c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3b01      	subs	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x1b2>
 8002672:	e007      	b.n	8002684 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40012400 	.word	0x40012400
 800269c:	20000008 	.word	0x20000008
 80026a0:	431bde83 	.word	0x431bde83

080026a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d040      	beq.n	8002744 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <ADC_Enable+0xac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <ADC_Enable+0xb0>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e0:	e002      	b.n	80026e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ee:	f7ff fd21 	bl	8002134 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026f4:	e01f      	b.n	8002736 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026f6:	f7ff fd1d 	bl	8002134 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d918      	bls.n	8002736 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d011      	beq.n	8002736 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e007      	b.n	8002746 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d1d8      	bne.n	80026f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000008 	.word	0x20000008
 8002754:	431bde83 	.word	0x431bde83

08002758 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d12e      	bne.n	80027d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002782:	f7ff fcd7 	bl	8002134 <HAL_GetTick>
 8002786:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002788:	e01b      	b.n	80027c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800278a:	f7ff fcd3 	bl	8002134 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d914      	bls.n	80027c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10d      	bne.n	80027c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e007      	b.n	80027d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d0dc      	beq.n	800278a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <__NVIC_EnableIRQ+0x34>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
         );
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff90 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff2d 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff42 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff90 	bl	80028cc <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5f 	bl	8002878 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff35 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e043      	b.n	8002a96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_DMA_Init+0xa8>)
 8002a16:	4413      	add	r3, r2
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_DMA_Init+0xac>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_DMA_Init+0xb0>)
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	bffdfff8 	.word	0xbffdfff8
 8002aa4:	cccccccd 	.word	0xcccccccd
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_DMA_Start_IT+0x20>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e04a      	b.n	8002b62 <HAL_DMA_Start_IT+0xb6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d13a      	bne.n	8002b54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9e8 	bl	8002ed8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 020e 	orr.w	r2, r2, #14
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e00f      	b.n	8002b42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0204 	bic.w	r2, r2, #4
 8002b30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 020a 	orr.w	r2, r2, #10
 8002b40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e005      	b.n	8002b60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e020      	b.n	8002bd4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 020e 	bic.w	r2, r2, #14
 8002ba0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d005      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e051      	b.n	8002ca6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <HAL_DMA_Abort_IT+0xd0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d029      	beq.n	8002c80 <HAL_DMA_Abort_IT+0xa0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <HAL_DMA_Abort_IT+0xd4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d022      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x9c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_DMA_Abort_IT+0xd8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d01a      	beq.n	8002c76 <HAL_DMA_Abort_IT+0x96>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_DMA_Abort_IT+0xdc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d012      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x90>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_DMA_Abort_IT+0xe0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00a      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x8a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <HAL_DMA_Abort_IT+0xe4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d102      	bne.n	8002c64 <HAL_DMA_Abort_IT+0x84>
 8002c5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c62:	e00e      	b.n	8002c82 <HAL_DMA_Abort_IT+0xa2>
 8002c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c68:	e00b      	b.n	8002c82 <HAL_DMA_Abort_IT+0xa2>
 8002c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6e:	e008      	b.n	8002c82 <HAL_DMA_Abort_IT+0xa2>
 8002c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c74:	e005      	b.n	8002c82 <HAL_DMA_Abort_IT+0xa2>
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	e002      	b.n	8002c82 <HAL_DMA_Abort_IT+0xa2>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	e000      	b.n	8002c82 <HAL_DMA_Abort_IT+0xa2>
 8002c80:	2301      	movs	r3, #1
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_DMA_Abort_IT+0xe8>)
 8002c84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
    } 
  }
  return status;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40020008 	.word	0x40020008
 8002cb4:	4002001c 	.word	0x4002001c
 8002cb8:	40020030 	.word	0x40020030
 8002cbc:	40020044 	.word	0x40020044
 8002cc0:	40020058 	.word	0x40020058
 8002cc4:	4002006c 	.word	0x4002006c
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2204      	movs	r2, #4
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d04f      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xc8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a66      	ldr	r2, [pc, #408]	; (8002ebc <HAL_DMA_IRQHandler+0x1f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d029      	beq.n	8002d7a <HAL_DMA_IRQHandler+0xae>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xaa>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a63      	ldr	r2, [pc, #396]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01a      	beq.n	8002d70 <HAL_DMA_IRQHandler+0xa4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a62      	ldr	r2, [pc, #392]	; (8002ec8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d012      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x9e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_DMA_IRQHandler+0x200>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x98>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5f      	ldr	r2, [pc, #380]	; (8002ed0 <HAL_DMA_IRQHandler+0x204>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_DMA_IRQHandler+0x92>
 8002d58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5c:	e00e      	b.n	8002d7c <HAL_DMA_IRQHandler+0xb0>
 8002d5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d62:	e00b      	b.n	8002d7c <HAL_DMA_IRQHandler+0xb0>
 8002d64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d68:	e008      	b.n	8002d7c <HAL_DMA_IRQHandler+0xb0>
 8002d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d6e:	e005      	b.n	8002d7c <HAL_DMA_IRQHandler+0xb0>
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	e002      	b.n	8002d7c <HAL_DMA_IRQHandler+0xb0>
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	e000      	b.n	8002d7c <HAL_DMA_IRQHandler+0xb0>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_DMA_IRQHandler+0x208>)
 8002d7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8094 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d92:	e08e      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2202      	movs	r2, #2
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d056      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x186>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d051      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020a 	bic.w	r2, r2, #10
 8002dca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <HAL_DMA_IRQHandler+0x1f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d029      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x166>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <HAL_DMA_IRQHandler+0x1f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x162>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a35      	ldr	r2, [pc, #212]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01a      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x15c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_DMA_IRQHandler+0x1fc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d012      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x156>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_DMA_IRQHandler+0x200>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00a      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x150>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_DMA_IRQHandler+0x204>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x14a>
 8002e10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e14:	e00e      	b.n	8002e34 <HAL_DMA_IRQHandler+0x168>
 8002e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1a:	e00b      	b.n	8002e34 <HAL_DMA_IRQHandler+0x168>
 8002e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e20:	e008      	b.n	8002e34 <HAL_DMA_IRQHandler+0x168>
 8002e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e26:	e005      	b.n	8002e34 <HAL_DMA_IRQHandler+0x168>
 8002e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e2c:	e002      	b.n	8002e34 <HAL_DMA_IRQHandler+0x168>
 8002e2e:	2320      	movs	r3, #32
 8002e30:	e000      	b.n	8002e34 <HAL_DMA_IRQHandler+0x168>
 8002e32:	2302      	movs	r3, #2
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_DMA_IRQHandler+0x208>)
 8002e36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d034      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e50:	e02f      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2208      	movs	r2, #8
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d028      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x1e8>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d023      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 020e 	bic.w	r2, r2, #14
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
    }
  }
  return;
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
}
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40020008 	.word	0x40020008
 8002ec0:	4002001c 	.word	0x4002001c
 8002ec4:	40020030 	.word	0x40020030
 8002ec8:	40020044 	.word	0x40020044
 8002ecc:	40020058 	.word	0x40020058
 8002ed0:	4002006c 	.word	0x4002006c
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d108      	bne.n	8002f18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f16:	e007      	b.n	8002f28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	60da      	str	r2, [r3, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b08b      	sub	sp, #44	; 0x2c
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	e169      	b.n	800321c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8158 	bne.w	8003216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a9a      	ldr	r2, [pc, #616]	; (80031d4 <HAL_GPIO_Init+0x2a0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d05e      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f70:	4a98      	ldr	r2, [pc, #608]	; (80031d4 <HAL_GPIO_Init+0x2a0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d875      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f76:	4a98      	ldr	r2, [pc, #608]	; (80031d8 <HAL_GPIO_Init+0x2a4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d058      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f7c:	4a96      	ldr	r2, [pc, #600]	; (80031d8 <HAL_GPIO_Init+0x2a4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d86f      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f82:	4a96      	ldr	r2, [pc, #600]	; (80031dc <HAL_GPIO_Init+0x2a8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d052      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f88:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_GPIO_Init+0x2a8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d869      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f8e:	4a94      	ldr	r2, [pc, #592]	; (80031e0 <HAL_GPIO_Init+0x2ac>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04c      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f94:	4a92      	ldr	r2, [pc, #584]	; (80031e0 <HAL_GPIO_Init+0x2ac>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d863      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f9a:	4a92      	ldr	r2, [pc, #584]	; (80031e4 <HAL_GPIO_Init+0x2b0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d046      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002fa0:	4a90      	ldr	r2, [pc, #576]	; (80031e4 <HAL_GPIO_Init+0x2b0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d85d      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d82a      	bhi.n	8003000 <HAL_GPIO_Init+0xcc>
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	d859      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_GPIO_Init+0x80>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	0800302f 	.word	0x0800302f
 8002fb8:	08003009 	.word	0x08003009
 8002fbc:	0800301b 	.word	0x0800301b
 8002fc0:	0800305d 	.word	0x0800305d
 8002fc4:	08003063 	.word	0x08003063
 8002fc8:	08003063 	.word	0x08003063
 8002fcc:	08003063 	.word	0x08003063
 8002fd0:	08003063 	.word	0x08003063
 8002fd4:	08003063 	.word	0x08003063
 8002fd8:	08003063 	.word	0x08003063
 8002fdc:	08003063 	.word	0x08003063
 8002fe0:	08003063 	.word	0x08003063
 8002fe4:	08003063 	.word	0x08003063
 8002fe8:	08003063 	.word	0x08003063
 8002fec:	08003063 	.word	0x08003063
 8002ff0:	08003063 	.word	0x08003063
 8002ff4:	08003063 	.word	0x08003063
 8002ff8:	08003011 	.word	0x08003011
 8002ffc:	08003025 	.word	0x08003025
 8003000:	4a79      	ldr	r2, [pc, #484]	; (80031e8 <HAL_GPIO_Init+0x2b4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003006:	e02c      	b.n	8003062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e029      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	3304      	adds	r3, #4
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e024      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	3308      	adds	r3, #8
 8003020:	623b      	str	r3, [r7, #32]
          break;
 8003022:	e01f      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	330c      	adds	r3, #12
 800302a:	623b      	str	r3, [r7, #32]
          break;
 800302c:	e01a      	b.n	8003064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003036:	2304      	movs	r3, #4
 8003038:	623b      	str	r3, [r7, #32]
          break;
 800303a:	e013      	b.n	8003064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003044:	2308      	movs	r3, #8
 8003046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	611a      	str	r2, [r3, #16]
          break;
 800304e:	e009      	b.n	8003064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003050:	2308      	movs	r3, #8
 8003052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	615a      	str	r2, [r3, #20]
          break;
 800305a:	e003      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e000      	b.n	8003064 <HAL_GPIO_Init+0x130>
          break;
 8003062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d801      	bhi.n	800306e <HAL_GPIO_Init+0x13a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	e001      	b.n	8003072 <HAL_GPIO_Init+0x13e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2bff      	cmp	r3, #255	; 0xff
 8003078:	d802      	bhi.n	8003080 <HAL_GPIO_Init+0x14c>
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x152>
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	3b08      	subs	r3, #8
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	210f      	movs	r1, #15
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	401a      	ands	r2, r3
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	431a      	orrs	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80b1 	beq.w	8003216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b4:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <HAL_GPIO_Init+0x2b8>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <HAL_GPIO_Init+0x2b8>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6193      	str	r3, [r2, #24]
 80030c0:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_GPIO_Init+0x2b8>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030cc:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <HAL_GPIO_Init+0x2bc>)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_GPIO_Init+0x1ec>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3f      	ldr	r2, [pc, #252]	; (80031f8 <HAL_GPIO_Init+0x2c4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00d      	beq.n	800311c <HAL_GPIO_Init+0x1e8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3e      	ldr	r2, [pc, #248]	; (80031fc <HAL_GPIO_Init+0x2c8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <HAL_GPIO_Init+0x1e4>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <HAL_GPIO_Init+0x2cc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_GPIO_Init+0x1e0>
 8003110:	2303      	movs	r3, #3
 8003112:	e006      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003114:	2304      	movs	r3, #4
 8003116:	e004      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003118:	2302      	movs	r3, #2
 800311a:	e002      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003120:	2300      	movs	r3, #0
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	f002 0203 	and.w	r2, r2, #3
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	4093      	lsls	r3, r2
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003132:	492f      	ldr	r1, [pc, #188]	; (80031f0 <HAL_GPIO_Init+0x2bc>)
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	492c      	ldr	r1, [pc, #176]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	43db      	mvns	r3, r3
 8003162:	4928      	ldr	r1, [pc, #160]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 8003164:	4013      	ands	r3, r2
 8003166:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003174:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4922      	ldr	r1, [pc, #136]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	43db      	mvns	r3, r3
 800318a:	491e      	ldr	r1, [pc, #120]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 800318c:	4013      	ands	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4918      	ldr	r1, [pc, #96]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4914      	ldr	r1, [pc, #80]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d021      	beq.n	8003208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	490e      	ldr	r1, [pc, #56]	; (8003204 <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
 80031d0:	e021      	b.n	8003216 <HAL_GPIO_Init+0x2e2>
 80031d2:	bf00      	nop
 80031d4:	10320000 	.word	0x10320000
 80031d8:	10310000 	.word	0x10310000
 80031dc:	10220000 	.word	0x10220000
 80031e0:	10210000 	.word	0x10210000
 80031e4:	10120000 	.word	0x10120000
 80031e8:	10110000 	.word	0x10110000
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40010800 	.word	0x40010800
 80031f8:	40010c00 	.word	0x40010c00
 80031fc:	40011000 	.word	0x40011000
 8003200:	40011400 	.word	0x40011400
 8003204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_GPIO_Init+0x304>)
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	43db      	mvns	r3, r3
 8003210:	4909      	ldr	r1, [pc, #36]	; (8003238 <HAL_GPIO_Init+0x304>)
 8003212:	4013      	ands	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	3301      	adds	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	f47f ae8e 	bne.w	8002f48 <HAL_GPIO_Init+0x14>
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	372c      	adds	r7, #44	; 0x2c
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e12b      	b.n	80034a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fd60 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	; 0x24
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800329e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a0:	f001 fba0 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 80032a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a81      	ldr	r2, [pc, #516]	; (80034b0 <HAL_I2C_Init+0x274>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d807      	bhi.n	80032c0 <HAL_I2C_Init+0x84>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a80      	ldr	r2, [pc, #512]	; (80034b4 <HAL_I2C_Init+0x278>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e006      	b.n	80032ce <HAL_I2C_Init+0x92>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a7d      	ldr	r2, [pc, #500]	; (80034b8 <HAL_I2C_Init+0x27c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0e7      	b.n	80034a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a78      	ldr	r2, [pc, #480]	; (80034bc <HAL_I2C_Init+0x280>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0c9b      	lsrs	r3, r3, #18
 80032e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <HAL_I2C_Init+0x274>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d802      	bhi.n	8003310 <HAL_I2C_Init+0xd4>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3301      	adds	r3, #1
 800330e:	e009      	b.n	8003324 <HAL_I2C_Init+0xe8>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a69      	ldr	r2, [pc, #420]	; (80034c0 <HAL_I2C_Init+0x284>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	3301      	adds	r3, #1
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	430b      	orrs	r3, r1
 800332a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	495c      	ldr	r1, [pc, #368]	; (80034b0 <HAL_I2C_Init+0x274>)
 8003340:	428b      	cmp	r3, r1
 8003342:	d819      	bhi.n	8003378 <HAL_I2C_Init+0x13c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e59      	subs	r1, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003358:	400b      	ands	r3, r1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_I2C_Init+0x138>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e59      	subs	r1, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fbb1 f3f3 	udiv	r3, r1, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003372:	e051      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 8003374:	2304      	movs	r3, #4
 8003376:	e04f      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <HAL_I2C_Init+0x168>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	440b      	add	r3, r1
 800338e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e012      	b.n	80033ca <HAL_I2C_Init+0x18e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	0099      	lsls	r1, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Init+0x196>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e022      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <HAL_I2C_Init+0x1bc>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1e58      	subs	r0, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	440b      	add	r3, r1
 80033e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f6:	e00f      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	0099      	lsls	r1, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	fbb0 f3f3 	udiv	r3, r0, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	6809      	ldr	r1, [r1, #0]
 800341c:	4313      	orrs	r3, r2
 800341e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6911      	ldr	r1, [r2, #16]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68d2      	ldr	r2, [r2, #12]
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	430b      	orrs	r3, r1
 800345a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	000186a0 	.word	0x000186a0
 80034b4:	001e847f 	.word	0x001e847f
 80034b8:	003d08ff 	.word	0x003d08ff
 80034bc:	431bde83 	.word	0x431bde83
 80034c0:	10624dd3 	.word	0x10624dd3

080034c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	817b      	strh	r3, [r7, #10]
 80034d6:	460b      	mov	r3, r1
 80034d8:	813b      	strh	r3, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7fe fe29 	bl	8002134 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	f040 80d9 	bne.w	80036a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2319      	movs	r3, #25
 80034f8:	2201      	movs	r2, #1
 80034fa:	496d      	ldr	r1, [pc, #436]	; (80036b0 <HAL_I2C_Mem_Write+0x1ec>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fcc1 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	e0cc      	b.n	80036a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_I2C_Mem_Write+0x56>
 8003516:	2302      	movs	r3, #2
 8003518:	e0c5      	b.n	80036a6 <HAL_I2C_Mem_Write+0x1e2>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d007      	beq.n	8003540 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2221      	movs	r2, #33	; 0x21
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a4d      	ldr	r2, [pc, #308]	; (80036b4 <HAL_I2C_Mem_Write+0x1f0>)
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003582:	88f8      	ldrh	r0, [r7, #6]
 8003584:	893a      	ldrh	r2, [r7, #8]
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	4603      	mov	r3, r0
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 faf8 	bl	8003b88 <I2C_RequestMemoryWrite>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d052      	beq.n	8003644 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e081      	b.n	80036a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fd42 	bl	8004030 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d107      	bne.n	80035ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06b      	b.n	80036a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d11b      	bne.n	8003644 <HAL_I2C_Mem_Write+0x180>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d017      	beq.n	8003644 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1aa      	bne.n	80035a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fd2e 	bl	80040b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	2b04      	cmp	r3, #4
 8003662:	d107      	bne.n	8003674 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003672:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e016      	b.n	80036a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	00100002 	.word	0x00100002
 80036b4:	ffff0000 	.word	0xffff0000

080036b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036d6:	f7fe fd2d 	bl	8002134 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	f040 8244 	bne.w	8003b72 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2319      	movs	r3, #25
 80036f0:	2201      	movs	r2, #1
 80036f2:	4982      	ldr	r1, [pc, #520]	; (80038fc <HAL_I2C_Mem_Read+0x244>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fbc5 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
 8003702:	e237      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2C_Mem_Read+0x5a>
 800370e:	2302      	movs	r3, #2
 8003710:	e230      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d007      	beq.n	8003738 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2222      	movs	r2, #34	; 0x22
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a62      	ldr	r2, [pc, #392]	; (8003900 <HAL_I2C_Mem_Read+0x248>)
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377a:	88f8      	ldrh	r0, [r7, #6]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4603      	mov	r3, r0
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fa92 	bl	8003cb4 <I2C_RequestMemoryRead>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1ec      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d113      	bne.n	80037ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e1c0      	b.n	8003b4c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d11e      	bne.n	8003810 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e2:	b672      	cpsid	i
}
 80037e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800380c:	b662      	cpsie	i
}
 800380e:	e035      	b.n	800387c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	2b02      	cmp	r3, #2
 8003816:	d11e      	bne.n	8003856 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003826:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003828:	b672      	cpsid	i
}
 800382a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003852:	b662      	cpsie	i
}
 8003854:	e012      	b.n	800387c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003864:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800387c:	e166      	b.n	8003b4c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	2b03      	cmp	r3, #3
 8003884:	f200 811f 	bhi.w	8003ac6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b01      	cmp	r3, #1
 800388e:	d123      	bne.n	80038d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fc4d 	bl	8004134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e167      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038d6:	e139      	b.n	8003b4c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d152      	bne.n	8003986 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	2200      	movs	r2, #0
 80038e8:	4906      	ldr	r1, [pc, #24]	; (8003904 <HAL_I2C_Mem_Read+0x24c>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 faca 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e13c      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
 80038fa:	bf00      	nop
 80038fc:	00100002 	.word	0x00100002
 8003900:	ffff0000 	.word	0xffff0000
 8003904:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003908:	b672      	cpsid	i
}
 800390a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800394e:	b662      	cpsie	i
}
 8003950:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003984:	e0e2      	b.n	8003b4c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2200      	movs	r2, #0
 800398e:	497b      	ldr	r1, [pc, #492]	; (8003b7c <HAL_I2C_Mem_Read+0x4c4>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fa77 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0e9      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039b0:	b672      	cpsid	i
}
 80039b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039e6:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_I2C_Mem_Read+0x4c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_I2C_Mem_Read+0x4cc>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0a1a      	lsrs	r2, r3, #8
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d118      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0220 	orr.w	r2, r3, #32
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a2e:	b662      	cpsie	i
}
 8003a30:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09a      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d1d9      	bne.n	8003a00 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a8e:	b662      	cpsie	i
}
 8003a90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac4:	e042      	b.n	8003b4c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fb32 	bl	8004134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e04c      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d118      	bne.n	8003b4c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f47f ae94 	bne.w	800387e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3728      	adds	r7, #40	; 0x28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	00010004 	.word	0x00010004
 8003b80:	20000008 	.word	0x20000008
 8003b84:	14f8b589 	.word	0x14f8b589

08003b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f960 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd8:	d103      	bne.n	8003be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e05f      	b.n	8003ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003be6:	897b      	ldrh	r3, [r7, #10]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	492d      	ldr	r1, [pc, #180]	; (8003cb0 <I2C_RequestMemoryWrite+0x128>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f998 	bl	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e04c      	b.n	8003ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa02 	bl	8004030 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d107      	bne.n	8003c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e02b      	b.n	8003ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c54:	893b      	ldrh	r3, [r7, #8]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]
 8003c5e:	e021      	b.n	8003ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c70:	6a39      	ldr	r1, [r7, #32]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f9dc 	bl	8004030 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d107      	bne.n	8003c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e005      	b.n	8003ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c9a:	893b      	ldrh	r3, [r7, #8]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	00010002 	.word	0x00010002

08003cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	813b      	strh	r3, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f8c2 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	d103      	bne.n	8003d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0aa      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	6a3a      	ldr	r2, [r7, #32]
 8003d36:	4952      	ldr	r1, [pc, #328]	; (8003e80 <I2C_RequestMemoryRead+0x1cc>)
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f8fa 	bl	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e097      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	6a39      	ldr	r1, [r7, #32]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f964 	bl	8004030 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d107      	bne.n	8003d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e076      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]
 8003d9a:	e021      	b.n	8003de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d9c:	893b      	ldrh	r3, [r7, #8]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	6a39      	ldr	r1, [r7, #32]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f93e 	bl	8004030 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d107      	bne.n	8003dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e050      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd6:	893b      	ldrh	r3, [r7, #8]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	6a39      	ldr	r1, [r7, #32]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f923 	bl	8004030 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d107      	bne.n	8003e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e035      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f82b 	bl	8003e84 <I2C_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d103      	bne.n	8003e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e013      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e50:	897b      	ldrh	r3, [r7, #10]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	6a3a      	ldr	r2, [r7, #32]
 8003e64:	4906      	ldr	r1, [pc, #24]	; (8003e80 <I2C_RequestMemoryRead+0x1cc>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f863 	bl	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	00010002 	.word	0x00010002

08003e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e94:	e025      	b.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d021      	beq.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fe f949 	bl	8002134 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d116      	bne.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e023      	b.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10d      	bne.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	e00c      	b.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4013      	ands	r3, r2
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bf0c      	ite	eq
 8003f1a:	2301      	moveq	r3, #1
 8003f1c:	2300      	movne	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d0b6      	beq.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f40:	e051      	b.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f50:	d123      	bne.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e046      	b.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d021      	beq.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa2:	f7fe f8c7 	bl	8002134 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d116      	bne.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e020      	b.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10c      	bne.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	e00b      	b.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d18d      	bne.n	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800403c:	e02d      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f8ce 	bl	80041e0 <I2C_IsAcknowledgeFailed>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e02d      	b.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d021      	beq.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7fe f86d 	bl	8002134 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d116      	bne.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e007      	b.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d1ca      	bne.n	800403e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040be:	e02d      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f88d 	bl	80041e0 <I2C_IsAcknowledgeFailed>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e02d      	b.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d021      	beq.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fe f82c 	bl	8002134 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b04      	cmp	r3, #4
 8004128:	d1ca      	bne.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004140:	e042      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b10      	cmp	r3, #16
 800414e:	d119      	bne.n	8004184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0210 	mvn.w	r2, #16
 8004158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e029      	b.n	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004184:	f7fd ffd6 	bl	8002134 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e007      	b.n	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d1b5      	bne.n	8004142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d11b      	bne.n	8004230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e272      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8087 	beq.w	800436a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800425c:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b04      	cmp	r3, #4
 8004266:	d00c      	beq.n	8004282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004268:	4b8f      	ldr	r3, [pc, #572]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d112      	bne.n	800429a <HAL_RCC_OscConfig+0x5e>
 8004274:	4b8c      	ldr	r3, [pc, #560]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d10b      	bne.n	800429a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d06c      	beq.n	8004368 <HAL_RCC_OscConfig+0x12c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d168      	bne.n	8004368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e24c      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x76>
 80042a4:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7f      	ldr	r2, [pc, #508]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e02e      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x98>
 80042ba:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7a      	ldr	r2, [pc, #488]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a77      	ldr	r2, [pc, #476]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e01d      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0xbc>
 80042de:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a71      	ldr	r2, [pc, #452]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a67      	ldr	r2, [pc, #412]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fd ff0c 	bl	8002134 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fd ff08 	bl	8002134 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e200      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	4b5d      	ldr	r3, [pc, #372]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0xe4>
 800433e:	e014      	b.n	800436a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fef8 	bl	8002134 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fd fef4 	bl	8002134 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1ec      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x10c>
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d063      	beq.n	800443e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004376:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004382:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x18c>
 800438e:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1c0      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4939      	ldr	r1, [pc, #228]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e03a      	b.n	800443e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d6:	f7fd fead 	bl	8002134 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fd fea9 	bl	8002134 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1a1      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4927      	ldr	r1, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e015      	b.n	800443e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd fe8c 	bl	8002134 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004420:	f7fd fe88 	bl	8002134 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e180      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03a      	beq.n	80044c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d019      	beq.n	8004486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fd fe6c 	bl	8002134 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004460:	f7fd fe68 	bl	8002134 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e160      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800447e:	2001      	movs	r0, #1
 8004480:	f000 fad8 	bl	8004a34 <RCC_Delay>
 8004484:	e01c      	b.n	80044c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fd fe52 	bl	8002134 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004492:	e00f      	b.n	80044b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fd fe4e 	bl	8002134 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d908      	bls.n	80044b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e146      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	42420000 	.word	0x42420000
 80044b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b92      	ldr	r3, [pc, #584]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e9      	bne.n	8004494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a6 	beq.w	800461a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b8b      	ldr	r3, [pc, #556]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b88      	ldr	r3, [pc, #544]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a87      	ldr	r2, [pc, #540]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	61d3      	str	r3, [r2, #28]
 80044ea:	4b85      	ldr	r3, [pc, #532]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b82      	ldr	r3, [pc, #520]	; (8004704 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <HAL_RCC_OscConfig+0x4c8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7e      	ldr	r2, [pc, #504]	; (8004704 <HAL_RCC_OscConfig+0x4c8>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fd fe0f 	bl	8002134 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fd fe0b 	bl	8002134 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	; 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e103      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	4b75      	ldr	r3, [pc, #468]	; (8004704 <HAL_RCC_OscConfig+0x4c8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x312>
 8004540:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6213      	str	r3, [r2, #32]
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x334>
 8004556:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a69      	ldr	r2, [pc, #420]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4a66      	ldr	r2, [pc, #408]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6213      	str	r3, [r2, #32]
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x356>
 8004578:	4b61      	ldr	r3, [pc, #388]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a60      	ldr	r2, [pc, #384]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	4b5e      	ldr	r3, [pc, #376]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 8004592:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a5a      	ldr	r2, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a57      	ldr	r2, [pc, #348]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b2:	f7fd fdbf 	bl	8002134 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd fdbb 	bl	8002134 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0b1      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x37e>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fd fda9 	bl	8002134 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd fda5 	bl	8002134 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e09b      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b40      	ldr	r3, [pc, #256]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4a3b      	ldr	r2, [pc, #236]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8087 	beq.w	8004732 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d061      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d146      	bne.n	80046c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b33      	ldr	r3, [pc, #204]	; (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fd fd79 	bl	8002134 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fd fd75 	bl	8002134 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e06d      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d108      	bne.n	8004680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4921      	ldr	r1, [pc, #132]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a19      	ldr	r1, [r3, #32]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	430b      	orrs	r3, r1
 8004692:	491b      	ldr	r1, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd fd49 	bl	8002134 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fd fd45 	bl	8002134 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e03d      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x46a>
 80046c4:	e035      	b.n	8004732 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd fd32 	bl	8002134 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd fd2e 	bl	8002134 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e026      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x498>
 80046f2:	e01e      	b.n	8004732 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e019      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
 8004708:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_OscConfig+0x500>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	429a      	cmp	r2, r3
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000

08004740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0d0      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d910      	bls.n	8004784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b67      	ldr	r3, [pc, #412]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 0207 	bic.w	r2, r3, #7
 800476a:	4965      	ldr	r1, [pc, #404]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b8      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800479c:	4b59      	ldr	r3, [pc, #356]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a58      	ldr	r2, [pc, #352]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b4:	4b53      	ldr	r3, [pc, #332]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b50      	ldr	r3, [pc, #320]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	494d      	ldr	r1, [pc, #308]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d040      	beq.n	8004860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d115      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b41      	ldr	r3, [pc, #260]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e073      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3d      	ldr	r3, [pc, #244]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e06b      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b39      	ldr	r3, [pc, #228]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4936      	ldr	r1, [pc, #216]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004830:	f7fd fc80 	bl	8002134 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fd fc7c 	bl	8002134 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e053      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d210      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 0207 	bic.w	r2, r3, #7
 8004876:	4922      	ldr	r1, [pc, #136]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e032      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4916      	ldr	r1, [pc, #88]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490e      	ldr	r1, [pc, #56]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ce:	f000 f821 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	490a      	ldr	r1, [pc, #40]	; (8004908 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a09      	ldr	r2, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1cc>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1d0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fbde 	bl	80020b0 <HAL_InitTick>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40022000 	.word	0x40022000
 8004904:	40021000 	.word	0x40021000
 8004908:	080065c8 	.word	0x080065c8
 800490c:	20000008 	.word	0x20000008
 8004910:	2000000c 	.word	0x2000000c

08004914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004914:	b490      	push	{r4, r7}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800491a:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800491c:	1d3c      	adds	r4, r7, #4
 800491e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004924:	f240 2301 	movw	r3, #513	; 0x201
 8004928:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b04      	cmp	r3, #4
 800494c:	d002      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x40>
 800494e:	2b08      	cmp	r3, #8
 8004950:	d003      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x46>
 8004952:	e02b      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004954:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004956:	623b      	str	r3, [r7, #32]
      break;
 8004958:	e02b      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	0c9b      	lsrs	r3, r3, #18
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3328      	adds	r3, #40	; 0x28
 8004964:	443b      	add	r3, r7
 8004966:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800496a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	0c5b      	lsrs	r3, r3, #17
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	3328      	adds	r3, #40	; 0x28
 8004982:	443b      	add	r3, r7
 8004984:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004988:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800498e:	fb03 f202 	mul.w	r2, r3, r2
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e004      	b.n	80049a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ae:	623b      	str	r3, [r7, #32]
      break;
 80049b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b2:	6a3b      	ldr	r3, [r7, #32]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc90      	pop	{r4, r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	080065b8 	.word	0x080065b8
 80049c4:	40021000 	.word	0x40021000
 80049c8:	007a1200 	.word	0x007a1200
 80049cc:	003d0900 	.word	0x003d0900

080049d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d4:	4b02      	ldr	r3, [pc, #8]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	20000008 	.word	0x20000008

080049e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e8:	f7ff fff2 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4903      	ldr	r1, [pc, #12]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	080065d8 	.word	0x080065d8

08004a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a10:	f7ff ffde 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0adb      	lsrs	r3, r3, #11
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4903      	ldr	r1, [pc, #12]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	080065d8 	.word	0x080065d8

08004a34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <RCC_Delay+0x34>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <RCC_Delay+0x38>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a50:	bf00      	nop
  }
  while (Delay --);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1e5a      	subs	r2, r3, #1
 8004a56:	60fa      	str	r2, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f9      	bne.n	8004a50 <RCC_Delay+0x1c>
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	20000008 	.word	0x20000008
 8004a6c:	10624dd3 	.word	0x10624dd3

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d07d      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a90:	4b4f      	ldr	r3, [pc, #316]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10d      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4a4b      	ldr	r2, [pc, #300]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	61d3      	str	r3, [r2, #28]
 8004aa8:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	4b46      	ldr	r3, [pc, #280]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d118      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a42      	ldr	r2, [pc, #264]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad0:	f7fd fb30 	bl	8002134 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fd fb2c 	bl	8002134 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	; 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e06d      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d027      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b14:	4b2e      	ldr	r3, [pc, #184]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b24:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b2a:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d014      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fafb 	bl	8002134 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fd faf7 	bl	8002134 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e036      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ee      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4917      	ldr	r1, [pc, #92]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b94:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	490b      	ldr	r1, [pc, #44]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	4904      	ldr	r1, [pc, #16]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40007000 	.word	0x40007000
 8004bd8:	42420440 	.word	0x42420440

08004bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e041      	b.n	8004c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd f8d0 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 fc28 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d001      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e03a      	b.n	8004d0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_TIM_Base_Start_IT+0x98>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x58>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d009      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x58>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x58>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <HAL_TIM_Base_Start_IT+0xa0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d010      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e007      	b.n	8004d08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800

08004d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e041      	b.n	8004db6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f839 	bl	8004dbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 fb86 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x24>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e022      	b.n	8004e3a <HAL_TIM_PWM_Start+0x6a>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d109      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x3e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e015      	b.n	8004e3a <HAL_TIM_PWM_Start+0x6a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x58>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e008      	b.n	8004e3a <HAL_TIM_PWM_Start+0x6a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e05e      	b.n	8004f00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Start+0x82>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e50:	e013      	b.n	8004e7a <HAL_TIM_PWM_Start+0xaa>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x92>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	e00b      	b.n	8004e7a <HAL_TIM_PWM_Start+0xaa>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xa2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e70:	e003      	b.n	8004e7a <HAL_TIM_PWM_Start+0xaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fd74 	bl	8005970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <HAL_TIM_PWM_Start+0x138>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <HAL_TIM_PWM_Start+0x138>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_TIM_PWM_Start+0xfa>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d009      	beq.n	8004eca <HAL_TIM_PWM_Start+0xfa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <HAL_TIM_PWM_Start+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_PWM_Start+0xfa>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <HAL_TIM_PWM_Start+0x140>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d111      	bne.n	8004eee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d010      	beq.n	8004efe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	e007      	b.n	8004efe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800

08004f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0202 	mvn.w	r2, #2
 8004f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa6f 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa62 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa71 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0204 	mvn.w	r2, #4
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa45 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa38 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa47 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0208 	mvn.w	r2, #8
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa1b 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa0e 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa1d 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b10      	cmp	r3, #16
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0210 	mvn.w	r2, #16
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2208      	movs	r2, #8
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9f1 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9e4 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9f3 	bl	800544c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0201 	mvn.w	r2, #1
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fdc2 	bl	8001c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fd32 	bl	8005b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9b7 	bl	800545e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b20      	cmp	r3, #32
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0220 	mvn.w	r2, #32
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fcfd 	bl	8005b16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ac      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x174>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b0c      	cmp	r3, #12
 800514a:	f200 809f 	bhi.w	800528c <HAL_TIM_PWM_ConfigChannel+0x168>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005189 	.word	0x08005189
 8005158:	0800528d 	.word	0x0800528d
 800515c:	0800528d 	.word	0x0800528d
 8005160:	0800528d 	.word	0x0800528d
 8005164:	080051c9 	.word	0x080051c9
 8005168:	0800528d 	.word	0x0800528d
 800516c:	0800528d 	.word	0x0800528d
 8005170:	0800528d 	.word	0x0800528d
 8005174:	0800520b 	.word	0x0800520b
 8005178:	0800528d 	.word	0x0800528d
 800517c:	0800528d 	.word	0x0800528d
 8005180:	0800528d 	.word	0x0800528d
 8005184:	0800524b 	.word	0x0800524b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f9d0 	bl	8005534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0208 	orr.w	r2, r2, #8
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0204 	bic.w	r2, r2, #4
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
      break;
 80051c6:	e062      	b.n	800528e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fa16 	bl	8005600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	619a      	str	r2, [r3, #24]
      break;
 8005208:	e041      	b.n	800528e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa5f 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0208 	orr.w	r2, r2, #8
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0204 	bic.w	r2, r2, #4
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	61da      	str	r2, [r3, #28]
      break;
 8005248:	e021      	b.n	800528e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 faa9 	bl	80057a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69d9      	ldr	r1, [r3, #28]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	021a      	lsls	r2, r3, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	61da      	str	r2, [r3, #28]
      break;
 800528a:	e000      	b.n	800528e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800528c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0b3      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x180>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f0:	d03e      	beq.n	8005370 <HAL_TIM_ConfigClockSource+0xd0>
 80052f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f6:	f200 8087 	bhi.w	8005408 <HAL_TIM_ConfigClockSource+0x168>
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fe:	f000 8085 	beq.w	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005306:	d87f      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005308:	2b70      	cmp	r3, #112	; 0x70
 800530a:	d01a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xa2>
 800530c:	2b70      	cmp	r3, #112	; 0x70
 800530e:	d87b      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005310:	2b60      	cmp	r3, #96	; 0x60
 8005312:	d050      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x116>
 8005314:	2b60      	cmp	r3, #96	; 0x60
 8005316:	d877      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005318:	2b50      	cmp	r3, #80	; 0x50
 800531a:	d03c      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0xf6>
 800531c:	2b50      	cmp	r3, #80	; 0x50
 800531e:	d873      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d058      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x136>
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d86f      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005328:	2b30      	cmp	r3, #48	; 0x30
 800532a:	d064      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x156>
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d86b      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d060      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x156>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d867      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d05c      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x156>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d05a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005340:	e062      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f000 faee 	bl	8005932 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005364:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	609a      	str	r2, [r3, #8]
      break;
 800536e:	e04e      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f000 fad7 	bl	8005932 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005392:	609a      	str	r2, [r3, #8]
      break;
 8005394:	e03b      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f000 fa4e 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2150      	movs	r1, #80	; 0x50
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 faa5 	bl	80058fe <TIM_ITRx_SetConfig>
      break;
 80053b4:	e02b      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 fa6c 	bl	80058a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2160      	movs	r1, #96	; 0x60
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fa95 	bl	80058fe <TIM_ITRx_SetConfig>
      break;
 80053d4:	e01b      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 fa2e 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2140      	movs	r1, #64	; 0x40
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fa85 	bl	80058fe <TIM_ITRx_SetConfig>
      break;
 80053f4:	e00b      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f000 fa7c 	bl	80058fe <TIM_ITRx_SetConfig>
        break;
 8005406:	e002      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800540c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <TIM_Base_SetConfig+0xb8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_Base_SetConfig+0x30>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d007      	beq.n	80054a0 <TIM_Base_SetConfig+0x30>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a26      	ldr	r2, [pc, #152]	; (800552c <TIM_Base_SetConfig+0xbc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_Base_SetConfig+0x30>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a25      	ldr	r2, [pc, #148]	; (8005530 <TIM_Base_SetConfig+0xc0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d108      	bne.n	80054b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <TIM_Base_SetConfig+0xb8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <TIM_Base_SetConfig+0x62>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d007      	beq.n	80054d2 <TIM_Base_SetConfig+0x62>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a19      	ldr	r2, [pc, #100]	; (800552c <TIM_Base_SetConfig+0xbc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_Base_SetConfig+0x62>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <TIM_Base_SetConfig+0xc0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d108      	bne.n	80054e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <TIM_Base_SetConfig+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d103      	bne.n	8005518 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	615a      	str	r2, [r3, #20]
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800

08005534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f023 0201 	bic.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f023 0302 	bic.w	r3, r3, #2
 800557c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a1c      	ldr	r2, [pc, #112]	; (80055fc <TIM_OC1_SetConfig+0xc8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10c      	bne.n	80055aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0308 	bic.w	r3, r3, #8
 8005596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <TIM_OC1_SetConfig+0xc8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d111      	bne.n	80055d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00

08005600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f023 0210 	bic.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0320 	bic.w	r3, r3, #32
 800564a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <TIM_OC2_SetConfig+0xd0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d10d      	bne.n	800567c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <TIM_OC2_SetConfig+0xd0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d113      	bne.n	80056ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800568a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	621a      	str	r2, [r3, #32]
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	40012c00 	.word	0x40012c00

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800571c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <TIM_OC3_SetConfig+0xd0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10d      	bne.n	800574e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <TIM_OC3_SetConfig+0xd0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d113      	bne.n	800577e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40012c00 	.word	0x40012c00

080057a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	031b      	lsls	r3, r3, #12
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <TIM_OC4_SetConfig+0x98>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d109      	bne.n	800581c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	019b      	lsls	r3, r3, #6
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr
 8005840:	40012c00 	.word	0x40012c00

08005844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0201 	bic.w	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 030a 	bic.w	r3, r3, #10
 8005880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 0210 	bic.w	r2, r3, #16
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	031b      	lsls	r3, r3, #12
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	f043 0307 	orr.w	r3, r3, #7
 8005920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	609a      	str	r2, [r3, #8]
}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005932:	b480      	push	{r7}
 8005934:	b087      	sub	sp, #28
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	021a      	lsls	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	431a      	orrs	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	609a      	str	r2, [r3, #8]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e046      	b.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1c:	d009      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10c      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800

08005a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e03d      	b.n	8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e03f      	b.n	8005bcc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fc f997 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2224      	movs	r2, #36	; 0x24
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fc54 	bl	800642c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d153      	bne.n	8005c96 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_UART_Transmit_DMA+0x26>
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e04c      	b.n	8005c98 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Transmit_DMA+0x38>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e045      	b.n	8005c98 <HAL_UART_Transmit_DMA+0xc4>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2221      	movs	r2, #33	; 0x21
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_UART_Transmit_DMA+0xcc>)
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_UART_Transmit_DMA+0xd0>)
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <HAL_UART_Transmit_DMA+0xd4>)
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	2200      	movs	r2, #0
 8005c52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3304      	adds	r3, #4
 8005c68:	461a      	mov	r2, r3
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	f7fc ff1e 	bl	8002aac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c78:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c90:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0800605f 	.word	0x0800605f
 8005ca4:	080060b1 	.word	0x080060b1
 8005ca8:	080060cd 	.word	0x080060cd

08005cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08a      	sub	sp, #40	; 0x28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_UART_IRQHandler+0x52>
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 faee 	bl	80062d8 <UART_Receive_IT>
      return;
 8005cfc:	e17b      	b.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80b1 	beq.w	8005e68 <HAL_UART_IRQHandler+0x1bc>
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <HAL_UART_IRQHandler+0x70>
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80a6 	beq.w	8005e68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_UART_IRQHandler+0x90>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_UART_IRQHandler+0xb0>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f043 0202 	orr.w	r2, r3, #2
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_UART_IRQHandler+0xd0>
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f043 0204 	orr.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <HAL_UART_IRQHandler+0xfa>
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <HAL_UART_IRQHandler+0xee>
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0208 	orr.w	r2, r3, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 811e 	beq.w	8005fec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_UART_IRQHandler+0x11e>
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fa87 	bl	80062d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <HAL_UART_IRQHandler+0x146>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d031      	beq.n	8005e56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9c9 	bl	800618a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d023      	beq.n	8005e4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d013      	beq.n	8005e46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	4a76      	ldr	r2, [pc, #472]	; (8005ffc <HAL_UART_IRQHandler+0x350>)
 8005e24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fc fed8 	bl	8002be0 <HAL_DMA_Abort_IT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	e00e      	b.n	8005e64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8f5 	bl	8006036 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	e00a      	b.n	8005e64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8f1 	bl	8006036 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	e006      	b.n	8005e64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8ed 	bl	8006036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e62:	e0c3      	b.n	8005fec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	bf00      	nop
    return;
 8005e66:	e0c1      	b.n	8005fec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 80a1 	bne.w	8005fb4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 809b 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8095 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d04e      	beq.n	8005f4c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005eb8:	8a3b      	ldrh	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8098 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ec4:	8a3a      	ldrh	r2, [r7, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	f080 8092 	bcs.w	8005ff0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8a3a      	ldrh	r2, [r7, #16]
 8005ed0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d02b      	beq.n	8005f34 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0210 	bic.w	r2, r2, #16
 8005f28:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fc fe1b 	bl	8002b6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f87f 	bl	8006048 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f4a:	e051      	b.n	8005ff0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d047      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005f64:	8a7b      	ldrh	r3, [r7, #18]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d044      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0210 	bic.w	r2, r2, #16
 8005fa6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fa8:	8a7b      	ldrh	r3, [r7, #18]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f84b 	bl	8006048 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fb2:	e01f      	b.n	8005ff4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x324>
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f91e 	bl	800620a <UART_Transmit_IT>
    return;
 8005fce:	e012      	b.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f95f 	bl	80062a8 <UART_EndTransmit_IT>
    return;
 8005fea:	e004      	b.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
    return;
 8005fec:	bf00      	nop
 8005fee:	e002      	b.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ff0:	bf00      	nop
 8005ff2:	e000      	b.n	8005ff6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ff4:	bf00      	nop
  }
}
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	080061e3 	.word	0x080061e3

08006000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr

08006012 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr

08006024 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d113      	bne.n	80060a2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800609e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060a0:	e002      	b.n	80060a8 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff ffac 	bl	8006000 <HAL_UART_TxCpltCallback>
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff ffa7 	bl	8006012 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b21      	cmp	r3, #33	; 0x21
 80060fe:	d108      	bne.n	8006112 <UART_DMAError+0x46>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2200      	movs	r2, #0
 800610a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800610c:	68b8      	ldr	r0, [r7, #8]
 800610e:	f000 f827 	bl	8006160 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b22      	cmp	r3, #34	; 0x22
 8006132:	d108      	bne.n	8006146 <UART_DMAError+0x7a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	f000 f822 	bl	800618a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f043 0210 	orr.w	r2, r3, #16
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006152:	68b8      	ldr	r0, [r7, #8]
 8006154:	f7ff ff6f 	bl	8006036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006176:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d107      	bne.n	80061ca <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0210 	bic.w	r2, r2, #16
 80061c8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff ff1a 	bl	8006036 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b21      	cmp	r3, #33	; 0x21
 800621c:	d13e      	bne.n	800629c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006226:	d114      	bne.n	8006252 <UART_Transmit_IT+0x48>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d110      	bne.n	8006252 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006244:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	1c9a      	adds	r2, r3, #2
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]
 8006250:	e008      	b.n	8006264 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6211      	str	r1, [r2, #32]
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29b      	uxth	r3, r3
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4619      	mov	r1, r3
 8006272:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006286:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006296:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fe99 	bl	8006000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b22      	cmp	r3, #34	; 0x22
 80062ea:	f040 8099 	bne.w	8006420 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d117      	bne.n	8006328 <UART_Receive_IT+0x50>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d113      	bne.n	8006328 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	b29a      	uxth	r2, r3
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	1c9a      	adds	r2, r3, #2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	629a      	str	r2, [r3, #40]	; 0x28
 8006326:	e026      	b.n	8006376 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d007      	beq.n	800634c <UART_Receive_IT+0x74>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <UART_Receive_IT+0x82>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e008      	b.n	800636c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006366:	b2da      	uxtb	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29b      	uxth	r3, r3
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4619      	mov	r1, r3
 8006384:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006386:	2b00      	cmp	r3, #0
 8006388:	d148      	bne.n	800641c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0220 	bic.w	r2, r2, #32
 8006398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695a      	ldr	r2, [r3, #20]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d123      	bne.n	8006412 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0210 	bic.w	r2, r2, #16
 80063de:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d10a      	bne.n	8006404 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fe1c 	bl	8006048 <HAL_UARTEx_RxEventCallback>
 8006410:	e002      	b.n	8006418 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fe06 	bl	8006024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e002      	b.n	8006422 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e000      	b.n	8006422 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006420:	2302      	movs	r3, #2
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006466:	f023 030c 	bic.w	r3, r3, #12
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	430b      	orrs	r3, r1
 8006472:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2c      	ldr	r2, [pc, #176]	; (8006540 <UART_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006494:	f7fe faba 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	e002      	b.n	80064a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800649c:	f7fe faa2 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 80064a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <UART_SetConfig+0x118>)
 80064ba:	fba2 2303 	umull	r2, r3, r2, r3
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	0119      	lsls	r1, r3, #4
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064d8:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <UART_SetConfig+0x118>)
 80064da:	fba3 0302 	umull	r0, r3, r3, r2
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	2064      	movs	r0, #100	; 0x64
 80064e2:	fb00 f303 	mul.w	r3, r0, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	3332      	adds	r3, #50	; 0x32
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <UART_SetConfig+0x118>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f8:	4419      	add	r1, r3
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009a      	lsls	r2, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <UART_SetConfig+0x118>)
 8006512:	fba3 0302 	umull	r0, r3, r3, r2
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	2064      	movs	r0, #100	; 0x64
 800651a:	fb00 f303 	mul.w	r3, r0, r3
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	3332      	adds	r3, #50	; 0x32
 8006524:	4a07      	ldr	r2, [pc, #28]	; (8006544 <UART_SetConfig+0x118>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	440a      	add	r2, r1
 8006536:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40013800 	.word	0x40013800
 8006544:	51eb851f 	.word	0x51eb851f

08006548 <__libc_init_array>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	2600      	movs	r6, #0
 800654c:	4d0c      	ldr	r5, [pc, #48]	; (8006580 <__libc_init_array+0x38>)
 800654e:	4c0d      	ldr	r4, [pc, #52]	; (8006584 <__libc_init_array+0x3c>)
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	42a6      	cmp	r6, r4
 8006556:	d109      	bne.n	800656c <__libc_init_array+0x24>
 8006558:	f000 f822 	bl	80065a0 <_init>
 800655c:	2600      	movs	r6, #0
 800655e:	4d0a      	ldr	r5, [pc, #40]	; (8006588 <__libc_init_array+0x40>)
 8006560:	4c0a      	ldr	r4, [pc, #40]	; (800658c <__libc_init_array+0x44>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	42a6      	cmp	r6, r4
 8006568:	d105      	bne.n	8006576 <__libc_init_array+0x2e>
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006570:	4798      	blx	r3
 8006572:	3601      	adds	r6, #1
 8006574:	e7ee      	b.n	8006554 <__libc_init_array+0xc>
 8006576:	f855 3b04 	ldr.w	r3, [r5], #4
 800657a:	4798      	blx	r3
 800657c:	3601      	adds	r6, #1
 800657e:	e7f2      	b.n	8006566 <__libc_init_array+0x1e>
 8006580:	080065e0 	.word	0x080065e0
 8006584:	080065e0 	.word	0x080065e0
 8006588:	080065e0 	.word	0x080065e0
 800658c:	080065e4 	.word	0x080065e4

08006590 <memset>:
 8006590:	4603      	mov	r3, r0
 8006592:	4402      	add	r2, r0
 8006594:	4293      	cmp	r3, r2
 8006596:	d100      	bne.n	800659a <memset+0xa>
 8006598:	4770      	bx	lr
 800659a:	f803 1b01 	strb.w	r1, [r3], #1
 800659e:	e7f9      	b.n	8006594 <memset+0x4>

080065a0 <_init>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr

080065ac <_fini>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr
